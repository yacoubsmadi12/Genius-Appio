"use client";

import { useState } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Badge } from "@/components/ui/badge";
import { 
  ArrowLeft, 
  Sparkles, 
  Eye, 
  Code, 
  RefreshCw, 
  Save,
  Loader2,
  Smartphone,
  FileCode,
  Palette,
  Play,
  Download,
  Folder,
  File
} from "lucide-react";
import type { Project, ProjectPage } from "@/types";

// Helper functions for Flutter code generation
function generateSampleFlutterCode(name: string, description: string): string {
  const className = name.replace(/\s+/g, '') + 'Screen';
  return `import 'package:flutter/material.dart';

class ${className} extends StatefulWidget {
  const ${className}({super.key});

  @override
  State<${className}> createState() => _${className}State();
}

class _${className}State extends State<${className}> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('${name}'),
        backgroundColor: Theme.of(context).colorScheme.inversePrimary,
      ),
      body: Center(
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              Icon(
                Icons.flutter_dash,
                size: 64,
                color: Theme.of(context).primaryColor,
              ),
              const SizedBox(height: 24),
              Text(
                '${name}',
                style: Theme.of(context).textTheme.headlineMedium,
                textAlign: TextAlign.center,
              ),
              const SizedBox(height: 16),
              Text(
                '${description}',
                style: Theme.of(context).textTheme.bodyLarge,
                textAlign: TextAlign.center,
              ),
              const SizedBox(height: 32),
              ElevatedButton(
                onPressed: () {
                  // Add your functionality here
                  ScaffoldMessenger.of(context).showSnackBar(
                    const SnackBar(content: Text('Button pressed!')),
                  );
                },
                child: const Text('Get Started'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}`;
}

function generateFallbackPubspec(appName: string): string {
  const packageName = appName.toLowerCase().replace(/[^a-z0-9]/g, '_');
  return `name: ${packageName}
description: "A beautiful Flutter app generated by Genius APPio."
publish_to: 'none'

version: 1.0.0+1

environment:
  sdk: '>=3.0.0 <4.0.0'

dependencies:
  flutter:
    sdk: flutter
  cupertino_icons: ^1.0.2

dev_dependencies:
  flutter_test:
    sdk: flutter
  flutter_lints: ^2.0.0

flutter:
  uses-material-design: true`;
}

function generateWidgetStructure(name: string): string {
  return `Scaffold\\n  AppBar\\n    Text (${name})\\n  Body\\n    Center\\n      Padding\\n        Column\\n          Icon (Flutter Dash)\\n          Text (Title)\\n          Text (Description)\\n          ElevatedButton\\n            Text (Get Started)`;
}

function generateProjectRoutes(pages: ProjectPage[]): string {
  const imports = pages.map(page => 
    `import 'screens/${page.screenFilePath?.split('/').pop()}';`
  ).join('\\n');
  
  const routes = pages.map(page => 
    `  '${page.routeName}': (context) => const ${page.className}(),`
  ).join('\\n');
  
  return `import 'package:flutter/material.dart';\\n${imports}\\n\\nclass AppRoutes {\\n  static Map<String, WidgetBuilder> routes = {\\n${routes}\\n  };\\n}`;
}

const formSchema = z.object({
  name: z.string().min(1, "Page name is required"),
  description: z.string().min(10, "Description must be at least 10 characters"),
});

interface PageBuilderProps {
  project: Project;
  page: ProjectPage | null; // null for new page, populated for editing
  onSave: (page: ProjectPage) => void;
  onCancel: () => void;
}

export function PageBuilder({ project, page, onSave, onCancel }: PageBuilderProps) {
  const [isGenerating, setIsGenerating] = useState(false);
  const [isBuilding, setIsBuilding] = useState(false);
  const [generatedPage, setGeneratedPage] = useState<ProjectPage | null>(page);
  const [activeTab, setActiveTab] = useState("prompt");
  const [buildResult, setBuildResult] = useState<any>(null);

  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      name: page?.name || "",
      description: page?.description || "",
    },
  });

  const generatePageWithAI = async (values: z.infer<typeof formSchema>) => {
    setIsGenerating(true);
    
    try {
      // Enhanced Gemini API call with FlutterFlow-like requirements
      const response = await fetch('/api/generate-page', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          name: values.name,
          description: values.description,
          projectContext: `${project.name}: ${project.description}`,
          existingPages: project.pages.map(p => ({ name: p.name, description: p.description })),
          generateForScreensFolder: true // Generate code specifically for /lib/screens/ structure
        }),
      });

      const result = await response.json();
      
      if (!response.ok || !result.success) {
        throw new Error(result.error || 'Failed to generate page');
      }

      const screenFileName = values.name.toLowerCase().replace(/\\s+/g, '_') + '_screen.dart';
      const className = values.name.replace(/\\s+/g, '') + 'Screen';
      const routeName = '/' + values.name.toLowerCase().replace(/\\s+/g, '_');
      
      const newPage: ProjectPage = {
        id: page?.id || Date.now().toString(),
        name: values.name,
        description: values.description,
        createdAt: page?.createdAt || new Date(),
        code: result.code,
        pubspecYaml: result.pubspecYaml || generateFallbackPubspec(values.name),
        widgetStructure: result.widgetStructure,
        previewUrl: `https://flutter-preview.example.com/${project.id}/${values.name.toLowerCase()}`,
        screenFilePath: `lib/screens/${screenFileName}`,
        className: className,
        routeName: routeName
      };
      
      setGeneratedPage(newPage);
      setActiveTab("preview");
    } catch (error) {
      console.error('Page generation failed:', error);
      // Fallback to sample code if API fails
      const screenFileName = values.name.toLowerCase().replace(/\\s+/g, '_') + '_screen.dart';
      const className = values.name.replace(/\\s+/g, '') + 'Screen';
      const routeName = '/' + values.name.toLowerCase().replace(/\\s+/g, '_');
      
      const fallbackPage: ProjectPage = {
        id: page?.id || Date.now().toString(),
        name: values.name,
        description: values.description,
        createdAt: page?.createdAt || new Date(),
        code: generateSampleFlutterCode(values.name, values.description),
        pubspecYaml: generateFallbackPubspec(values.name),
        widgetStructure: generateWidgetStructure(values.name),
        previewUrl: `https://flutter-preview.example.com/${project.id}/${values.name.toLowerCase()}`,
        screenFilePath: `lib/screens/${screenFileName}`,
        className: className,
        routeName: routeName
      };
      
      setGeneratedPage(fallbackPage);
      setActiveTab("preview");
      
      // Show error message to user
      alert(`AI Generation Error: ${error instanceof Error ? error.message : 'Unknown error'}. Using fallback code.`);
    } finally {
      setIsGenerating(false);
    }
  };

  const handleSave = () => {
    if (generatedPage) {
      onSave(generatedPage);
    }
  };

  const handleRegenerate = () => {
    const values = form.getValues();
    generatePageWithAI(values);
  };

  const handleRunPreview = async () => {
    if (!generatedPage) return;

    setIsBuilding(true);
    try {
      // Create project files for Flutter build
      const projectFiles = [
        {
          path: 'lib/main.dart',
          content: generatedPage.code
        },
        {
          path: 'pubspec.yaml',
          content: generatedPage.pubspecYaml
        }
      ];

      // Call the build-flutter API
      const response = await fetch('/api/build-flutter', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          files: projectFiles,
          projectName: `${project.name}_${generatedPage.name}`.replace(/\\s+/g, '_')
        }),
      });

      const result = await response.json();
      
      if (response.ok && result.success) {
        setBuildResult(result);
        // Update the generated page with the build URL
        const updatedPage = {
          ...generatedPage,
          flutterBuildUrl: result.previewUrl
        };
        setGeneratedPage(updatedPage);
        
        // Auto-switch to Project Files tab to show build results
        setActiveTab("project-files");
      } else {
        throw new Error(result.error || 'Build failed');
      }
    } catch (error) {
      console.error('Flutter build failed:', error);
      alert(`Build failed: ${error instanceof Error ? error.message : 'Unknown error'}`);
    } finally {
      setIsBuilding(false);
    }
  };

  const handleExportZIP = async () => {
    if (!generatedPage) return;

    try {
      // Create a downloadable ZIP of the Flutter project
      const projectFiles = {
        'lib/main.dart': generatedPage.code,
        'pubspec.yaml': generatedPage.pubspecYaml,
        'README.md': `# ${generatedPage.name}\\n\\n${generatedPage.description}\\n\\nGenerated by Genius APPio`,
        'analysis_options.yaml': `include: package:flutter_lints/flutter.yaml`,
      };

      // Create download link (simple implementation)
      const blob = new Blob([JSON.stringify(projectFiles, null, 2)], { type: 'application/json' });
      const url = URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.download = `${generatedPage.name.replace(/\\s+/g, '_')}_flutter_project.json`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      URL.revokeObjectURL(url);
      
      alert('Project files exported! Note: This is a simplified export. Use the Run Preview to get the complete Flutter project.');
    } catch (error) {
      console.error('Export failed:', error);
      alert('Export failed. Please try again.');
    }
  };

  return (
    <div className="min-h-screen bg-background">
      {/* Header */}
      <div className="border-b">
        <div className="container mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-4">
              <Button variant="ghost" size="sm" onClick={onCancel}>
                <ArrowLeft className="h-4 w-4 mr-2" />
                Back to Project
              </Button>
              <div className="h-6 border-l border-border" />
              <div>
                <h1 className="text-xl font-bold">
                  {page ? "Edit Page" : "🚀 AI App Builder Assistant"}
                </h1>
                <p className="text-sm text-muted-foreground">
                  {page ? `Editing ${page.name}` : `Create Flutter pages for ${project.name} with AI assistance`}
                </p>
              </div>
            </div>
            
            {generatedPage && (
              <div className="flex items-center gap-2">
                <Button variant="outline" onClick={handleRegenerate} disabled={isGenerating}>
                  <RefreshCw className="h-4 w-4 mr-2" />
                  Regenerate
                </Button>
                <Button variant="outline" onClick={handleRunPreview} disabled={isBuilding}>
                  {isBuilding ? (
                    <><Loader2 className="h-4 w-4 mr-2 animate-spin" />Building...</>
                  ) : (
                    <><Play className="h-4 w-4 mr-2" />Run Preview</>
                  )}
                </Button>
                <Button variant="outline" onClick={handleExportZIP}>
                  <Download className="h-4 w-4 mr-2" />
                  Export ZIP
                </Button>
                <Button onClick={handleSave}>
                  <Save className="h-4 w-4 mr-2" />
                  Save Page
                </Button>
              </div>
            )}
          </div>
        </div>
      </div>

      {/* Main Content */}
      <div className="container mx-auto px-4 py-6">
        <Tabs value={activeTab} onValueChange={setActiveTab}>
          <TabsList className="grid w-full grid-cols-4">
            <TabsTrigger value="prompt">
              <Sparkles className="h-4 w-4 mr-2" />
              AI Prompt
            </TabsTrigger>
            <TabsTrigger value="preview" disabled={!generatedPage && !isGenerating}>
              <Eye className="h-4 w-4 mr-2" />
              Preview & Actions
            </TabsTrigger>
            <TabsTrigger value="code" disabled={!generatedPage}>
              <Code className="h-4 w-4 mr-2" />
              Generated Code
            </TabsTrigger>
            <TabsTrigger value="project-files" disabled={!generatedPage}>
              <Folder className="h-4 w-4 mr-2" />
              Project Files
            </TabsTrigger>
          </TabsList>

          <TabsContent value="prompt" className="mt-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Sparkles className="h-5 w-5 text-primary" />
                  Describe Your Flutter Page
                </CardTitle>
                <CardDescription>
                  Tell AI what kind of page you want to create. Be specific about the layout, features, and functionality.
                  The generated code will be saved to <code>/lib/screens/{`{page_name}`}_screen.dart</code>
                </CardDescription>
              </CardHeader>
              <CardContent>
                <Form {...form}>
                  <form onSubmit={form.handleSubmit(generatePageWithAI)} className="space-y-6">
                    <FormField
                      control={form.control}
                      name="name"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Page Name</FormLabel>
                          <FormControl>
                            <Input
                              placeholder="e.g., Login Page, Home Dashboard, Profile Settings"
                              {...field}
                            />
                          </FormControl>
                          <FormDescription>
                            What should this page be called? This will create {field.value ? field.value.toLowerCase().replace(/\\s+/g, '_') + '_screen.dart' : '{page_name}_screen.dart'}
                          </FormDescription>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    
                    <FormField
                      control={form.control}
                      name="description"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Page Description & Requirements</FormLabel>
                          <FormControl>
                            <Textarea
                              placeholder="Example: 'A login page with email and password fields, a blue gradient background, company logo at the top, login button with rounded corners, and a forgot password link. Include form validation and loading states.'"
                              className="resize-none"
                              rows={6}
                              {...field}
                            />
                          </FormControl>
                          <FormDescription>
                            <div className="bg-gradient-to-r from-emerald-50 to-blue-50 dark:from-emerald-900/20 dark:to-blue-900/20 p-4 rounded-lg mt-3">
                              <div className="text-sm">💡 <strong>FlutterFlow-like Tips:</strong></div>
                              <div className="text-sm mt-2 space-y-1">
                                <div>• Specify UI components: buttons, text fields, images, cards</div>
                                <div>• Mention colors, fonts, and styling preferences</div>
                                <div>• Describe layout: columns, rows, stack, padding</div>
                                <div>• Include functionality: navigation, forms, validation</div>
                                <div>• Reference other pages in your project for consistency</div>
                              </div>
                            </div>
                          </FormDescription>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    
                    <Button type="submit" size="lg" className="w-full bg-gradient-to-r from-emerald-600 to-blue-600 hover:from-emerald-700 hover:to-blue-700" disabled={isGenerating}>
                      {isGenerating ? (
                        <>
                          <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                          🧠 Gemini AI is generating your Flutter page...
                        </>
                      ) : (
                        <>
                          <Sparkles className="mr-2 h-4 w-4" />
                          ✨ Generate Flutter Page with AI
                        </>
                      )}
                    </Button>
                  </form>
                </Form>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="preview" className="mt-6">
            {/* FlutterFlow-like Action Buttons */}
            {generatedPage && (
              <Card className="mb-6 bg-gradient-to-r from-emerald-50 to-blue-50 dark:from-emerald-900/20 dark:to-blue-900/20 border-2 border-dashed border-emerald-200 dark:border-emerald-700">
                <CardHeader className="pb-3">
                  <CardTitle className="text-lg flex items-center gap-2">
                    <Sparkles className="h-5 w-5 text-emerald-600" />
                    🎉 AI Generated Your Page Successfully!
                  </CardTitle>
                  <CardDescription>
                    Review your generated <strong>{generatedPage.name}</strong> page. Choose what to do next:
                  </CardDescription>
                </CardHeader>
                <CardContent className="pt-0">
                  <div className="flex flex-wrap gap-3">
                    <Button 
                      size="lg" 
                      className="bg-emerald-600 hover:bg-emerald-700"
                      onClick={handleSave}
                    >
                      <Save className="h-4 w-4 mr-2" />
                      ✅ Keep This Page
                    </Button>
                    <Button 
                      size="lg" 
                      variant="outline" 
                      onClick={() => setActiveTab('prompt')}
                    >
                      <RefreshCw className="h-4 w-4 mr-2" />
                      🔄 Modify & Regenerate
                    </Button>
                    <Button 
                      size="lg" 
                      variant="outline" 
                      onClick={handleRegenerate}
                      disabled={isGenerating}
                    >
                      {isGenerating ? (
                        <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                      ) : (
                        <Sparkles className="h-4 w-4 mr-2" />
                      )}
                      🎲 Regenerate New Version
                    </Button>
                    <Button 
                      size="lg" 
                      variant="outline" 
                      onClick={handleRunPreview}
                      disabled={isBuilding}
                    >
                      {isBuilding ? (
                        <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                      ) : (
                        <Play className="h-4 w-4 mr-2" />
                      )}
                      🚀 Run Live Preview
                    </Button>
                  </div>
                </CardContent>
              </Card>
            )}
            
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              {/* Enhanced Mobile Preview */}
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Smartphone className="h-5 w-5" />
                    Flutter Page Preview
                  </CardTitle>
                  <CardDescription>
                    Live preview of your {generatedPage ? generatedPage.screenFilePath : 'generated page'}
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  {isGenerating ? (
                    <div className="flex items-center justify-center h-96 bg-muted rounded-lg">
                      <div className="text-center">
                        <Loader2 className="h-8 w-8 animate-spin mx-auto mb-4 text-primary" />
                        <p className="font-semibold">🚀 Gemini AI is generating your Flutter page...</p>
                        <p className="text-sm text-muted-foreground mt-2">Creating beautiful UI components and functionality</p>
                        <div className="mt-4 space-y-1">
                          <div className="text-xs text-muted-foreground">✓ Analyzing your requirements</div>
                          <div className="text-xs text-muted-foreground">✓ Generating Flutter widgets</div>
                          <div className="text-xs text-muted-foreground animate-pulse">⚡ Building screen structure...</div>
                        </div>
                      </div>
                    </div>
                  ) : generatedPage ? (
                    <div className="bg-slate-100 dark:bg-slate-800 rounded-lg p-4 h-96 overflow-auto">
                      <div className="bg-white dark:bg-slate-900 rounded-lg shadow-sm p-4 h-full border">
                        <div className="text-center space-y-4">
                          <div className="flex items-center justify-between mb-4">
                            <div className="text-xs text-muted-foreground">{generatedPage.screenFilePath}</div>
                            <Badge variant="secondary">{generatedPage.className}</Badge>
                          </div>
                          <div className="w-16 h-16 bg-gradient-to-br from-blue-500 to-purple-600 rounded-xl mx-auto flex items-center justify-center">
                            <Smartphone className="h-8 w-8 text-white" />
                          </div>
                          <h2 className="text-lg font-bold text-foreground">{generatedPage.name}</h2>
                          <p className="text-sm text-muted-foreground px-4">
                            {generatedPage.description}
                          </p>
                          <div className="space-y-3 mt-6">
                            <div className="h-12 bg-gradient-to-r from-blue-500 to-blue-600 rounded-lg shadow-sm flex items-center justify-center">
                              <span className="text-white text-sm font-medium">Primary Action</span>
                            </div>
                            <div className="h-10 bg-muted/50 rounded-lg flex items-center px-4">
                              <div className="w-3 h-3 bg-gray-400 rounded mr-3"></div>
                              <div className="text-xs text-muted-foreground">Interactive Element</div>
                            </div>
                            <div className="h-10 bg-muted/50 rounded-lg flex items-center px-4">
                              <div className="w-3 h-3 bg-gray-400 rounded mr-3"></div>
                              <div className="text-xs text-muted-foreground">Flutter Widget</div>
                            </div>
                          </div>
                          <div className="mt-4 pt-4 border-t">
                            <div className="text-xs text-emerald-600 font-medium">✓ Generated & Ready to Use</div>
                          </div>
                        </div>
                      </div>
                    </div>
                  ) : (
                    <div className="flex items-center justify-center h-96 bg-muted rounded-lg border-2 border-dashed">
                      <div className="text-center">
                        <Smartphone className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
                        <p className="text-muted-foreground font-medium">Generate a page to see preview</p>
                        <p className="text-sm text-muted-foreground mt-2">Describe your page and let AI create it for you</p>
                      </div>
                    </div>
                  )}
                </CardContent>
              </Card>

              {/* Widget Structure */}
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Palette className="h-5 w-5" />
                    Widget Structure
                  </CardTitle>
                  <CardDescription>
                    Flutter widgets used in this page
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  {generatedPage ? (
                    <div className="space-y-2">
                      {generatedPage.widgetStructure?.split('\\n').map((widget, index) => (
                        <div key={index} className="flex items-center gap-2">
                          <Badge variant="outline">{widget.trim()}</Badge>
                        </div>
                      ))}
                    </div>
                  ) : (
                    <div className="text-center py-8">
                      <p className="text-muted-foreground">Widget structure will appear here</p>
                    </div>
                  )}
                </CardContent>
              </Card>
            </div>
          </TabsContent>

          <TabsContent value="code" className="mt-6">
            <div className="space-y-6">
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <FileCode className="h-5 w-5" />
                    Generated Dart Code ({generatedPage?.screenFilePath || 'lib/screens/page_screen.dart'})
                  </CardTitle>
                  <CardDescription>
                    Complete Flutter code for your page - ready to save to your project
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  {generatedPage ? (
                    <div className="bg-slate-900 text-slate-100 p-4 rounded-lg overflow-x-auto max-h-96">
                      <pre className="text-sm">
                        <code>{generatedPage.code}</code>
                      </pre>
                    </div>
                  ) : (
                    <div className="text-center py-8">
                      <p className="text-muted-foreground">Generated code will appear here</p>
                    </div>
                  )}
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <File className="h-5 w-5" />
                    pubspec.yaml Dependencies
                  </CardTitle>
                  <CardDescription>
                    Flutter project dependencies and configuration
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  {generatedPage ? (
                    <div className="bg-slate-900 text-slate-100 p-4 rounded-lg overflow-x-auto max-h-60">
                      <pre className="text-sm">
                        <code>{generatedPage.pubspecYaml}</code>
                      </pre>
                    </div>
                  ) : (
                    <div className="text-center py-8">
                      <p className="text-muted-foreground">pubspec.yaml will appear here</p>
                    </div>
                  )}
                </CardContent>
              </Card>
            </div>
          </TabsContent>

          <TabsContent value="project-files" className="mt-6">
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              {/* Enhanced Project Structure */}
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Folder className="h-5 w-5" />
                    Complete Flutter Project Structure
                  </CardTitle>
                  <CardDescription>
                    Full project with proper Android v2+ embedding, iOS, and web support
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  {generatedPage ? (
                    <div className="space-y-2 font-mono text-xs bg-slate-50 dark:bg-slate-900 p-4 rounded-lg max-h-80 overflow-auto">
                      <div className="flex items-center gap-2">
                        <Folder className="h-4 w-4 text-blue-500" />
                        <span className="font-bold text-blue-600">{project.name.toLowerCase().replace(/\\s+/g, '_')}/</span>
                      </div>
                      <div className="ml-4 space-y-1">
                        {/* Android folder - v2 embedding */}
                        <div className="flex items-center gap-2">
                          <Folder className="h-4 w-4 text-green-500" />
                          <span className="font-semibold">android/ <Badge variant="secondary" className="ml-2 text-xs">v2+ embedding</Badge></span>
                        </div>
                        
                        {/* iOS folder */}
                        <div className="flex items-center gap-2">
                          <Folder className="h-4 w-4 text-blue-400" />
                          <span className="font-semibold">ios/ <Badge variant="secondary" className="ml-2 text-xs">iOS 12+</Badge></span>
                        </div>
                        
                        {/* Lib folder with screens */}
                        <div className="flex items-center gap-2">
                          <Folder className="h-4 w-4 text-purple-500" />
                          <span className="font-semibold">lib/</span>
                        </div>
                        <div className="ml-8 space-y-1">
                          <div className="flex items-center gap-2">
                            <File className="h-3 w-3 text-purple-600" />
                            <span>main.dart <Badge variant="outline" className="ml-2 text-xs">Entry Point</Badge></span>
                          </div>
                          <div className="flex items-center gap-2">
                            <File className="h-3 w-3 text-purple-600" />
                            <span>routes.dart <Badge variant="outline" className="ml-2 text-xs">Auto-generated</Badge></span>
                          </div>
                          <div className="flex items-center gap-2">
                            <Folder className="h-3 w-3 text-purple-400" />
                            <span className="font-semibold">screens/ <Badge variant="secondary" className="ml-2 text-xs">{project.pages.length + 1} pages</Badge></span>
                          </div>
                          <div className="ml-12 space-y-1">
                            {project.pages.map((page, index) => (
                              <div key={page.id} className="flex items-center gap-2">
                                <File className="h-3 w-3 text-emerald-500" />
                                <span className="text-emerald-600">{page.screenFilePath?.split('/').pop()}</span>
                              </div>
                            ))}
                            <div className="flex items-center gap-2">
                              <File className="h-3 w-3 text-emerald-500" />
                              <span className="text-emerald-600 font-semibold">{generatedPage.screenFilePath?.split('/').pop()} <Badge variant="default" className="ml-2 text-xs">Current</Badge></span>
                            </div>
                          </div>
                        </div>
                        
                        {/* Web folder */}
                        <div className="flex items-center gap-2">
                          <Folder className="h-4 w-4 text-orange-500" />
                          <span className="font-semibold">web/ <Badge variant="secondary" className="ml-2 text-xs">PWA Ready</Badge></span>
                        </div>
                        
                        {/* Test folder */}
                        <div className="flex items-center gap-2">
                          <Folder className="h-4 w-4 text-yellow-500" />
                          <span>test/</span>
                        </div>
                        
                        {/* Root files */}
                        <div className="flex items-center gap-2">
                          <File className="h-4 w-4 text-blue-600" />
                          <span className="font-semibold">pubspec.yaml</span>
                        </div>
                      </div>
                      
                      <div className="mt-4 pt-3 border-t border-slate-200 dark:border-slate-700">
                        <div className="text-emerald-600 text-xs font-medium">✓ Complete runnable Flutter project with all platforms</div>
                        <div className="text-emerald-600 text-xs">✓ Auto-generated navigation routes</div>
                        <div className="text-emerald-600 text-xs">✓ Ready for 'flutter run -d chrome/android/ios'</div>
                      </div>
                    </div>
                  ) : (
                    <div className="text-center py-8">
                      <p className="text-muted-foreground">Generate a page to see complete project structure</p>
                    </div>
                  )}
                </CardContent>
              </Card>

              {/* Dynamic Routes & Navigation */}
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Code className="h-5 w-5" />
                    Auto-Generated Routes
                  </CardTitle>
                  <CardDescription>
                    Navigation routes automatically updated when you add pages
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  {generatedPage ? (
                    <div className="space-y-4">
                      <div className="bg-slate-900 text-slate-100 p-4 rounded-lg text-xs font-mono max-h-60 overflow-auto">
                        <pre>{generateProjectRoutes([...project.pages, generatedPage])}</pre>
                      </div>
                      <div className="grid grid-cols-2 gap-4">
                        <div className="space-y-2">
                          <h4 className="font-semibold text-sm">Current Routes:</h4>
                          <div className="space-y-1">
                            {project.pages.map((page) => (
                              <div key={page.id} className="flex items-center gap-2 text-sm">
                                <Badge variant="outline" className="text-xs">{page.routeName}</Badge>
                                <span className="text-muted-foreground">→ {page.className}</span>
                              </div>
                            ))}
                            <div className="flex items-center gap-2 text-sm">
                              <Badge variant="default" className="text-xs">{generatedPage.routeName}</Badge>
                              <span className="text-emerald-600 font-medium">→ {generatedPage.className} (New)</span>
                            </div>
                          </div>
                        </div>
                        <div className="space-y-2">
                          <h4 className="font-semibold text-sm">Navigation Features:</h4>
                          <div className="space-y-1 text-xs text-muted-foreground">
                            <div>✓ Automatic route generation</div>
                            <div>✓ Navigator.pushNamed() support</div>
                            <div>✓ Named route navigation</div>
                            <div>✓ Deep linking ready</div>
                            <div>✓ Back button handling</div>
                          </div>
                        </div>
                      </div>
                    </div>
                  ) : (
                    <div className="text-center py-8">
                      <p className="text-muted-foreground">Generate a page to see auto-generated routes</p>
                    </div>
                  )}
                </CardContent>
              </Card>
            </div>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
}